%%
%% Copyright 2020, PÃ©ter Dimitrov <peterdmv@protonmail.com>.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%

%%%-------------------------------------------------------------------
%% @doc Implementation of Bitcoin BIP32:
%%      Hierarchical Deterministic Wallets
%% @end
%%%-------------------------------------------------------------------

-module(bip32).

-export([master_key/1,
	 parse_256/1,
	 point/1,
	 ser_32/1,
	 ser_256/1,
	 ser_p/1]).

-record(extended_key, {key, chain_code}).

%% Order of the group generated by G (secp256k1)
-define(N, 16#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141).

point(P) ->
    secp256k1:ec_pubkey_create(P).

ser_32(I) ->
    <<I:4/big-unsigned-integer-unit:8>>.

ser_256(I) ->
    <<I:32/big-integer-unit:8>>.

ser_p(P) ->
    secp256k1:ec_pubkey_serialize(P, compressed).

parse_256(<<I:32/big-integer-unit:8>>) ->
    I.

master_key(Seed) ->
    <<IL:32/binary-unit:8,IR:32/binary-unit:8>> =
	crypto:hmac(sha512, "Bitcoin seed", Seed),
    Key = parse_256(IL),
    ExtKey = #extended_key{key = Key,
			   chain_code = IR},
    case validate_key(Key) of
	true ->
	    {ok, ExtKey};
	false ->
	    {error, {invalid_key, ExtKey}}
    end.

validate_key(Key) when Key =:= 0 orelse
		       Key >= ?N ->
    false;
validate_key(_) ->
    true.
